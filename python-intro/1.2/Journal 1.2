Learning Goals

⦁	Explain variables and data types in Python
⦁	Summarize the use of objects in Python
⦁	Create a data structure for your Recipe app

Reflection Questions

1.	Imagine you’re having a conversation with a future colleague about whether to use the iPython Shell instead of Python’s default shell. 
What reasons would you give to explain the benefits of using the iPython Shell over the default one?

Answer: Dear future colleage, I would highly recommend iPython due to the auto-completion, and color coding alone. However iPython does offer
even more benefit in comparison to the basic python shell, including but not limited to enhanced error debugging, detailed inline help, and magic commands,
such as bookmarking a certain directory, code wrapping, color scheme choice, and percents availble even for multiple lines.
all things the bare bones python package does not provide

2.	Python has a host of different data types that allow you to store and organize information. List 4 examples of data types that Python recognizes, 
briefly define them, and indicate whether they are scalar or non-scalar.

Data type	             Definition	                                                                                                                                        Scalar or Non-Scalar?
tuples                   tuples are immutable arrays that you can store many different values in but you can not change the values, Only ovewrite or delete.                   Scalar
lists                    lists are mutable arrays that you can store values in, but you can modify the values and even rearrange them.                                         Non-Scalar
strings                  strings are an immutable array of values surrounded by quotations, you can not modify but overwrite the data or delete them.                          Scalar
dictionaries		     dictionaries are mutable objects that store both values and objects following a key-value pair syntax.                                                Non-Scalar
		
		
		


3.	A frequent question at job interviews for Python developers is: what is the difference between lists and tuples in Python? Write down how you would respond.

Answer: The main difference between tuples and lists is that you can change the values and rearrange them in a list.

4.	In the task for this Exercise, you decided what you thought was the most suitable data structure for storing all the information for a recipe. 
Now, imagine you’re creating a language-learning app that helps users memorize vocabulary through flashcards. Users can input vocabulary words, definitions, 
and their category (noun, verb, etc.) into the flashcards. They can then quiz themselves by flipping through the flashcards. 
Think about the necessary data types and what would be the most suitable data structure for this language-learning app. 
Between tuples, lists, and dictionaries, which would you choose? Think about their respective advantages and limitations, 
and where flexibility might be useful if you were to continue developing the language-learning app beyond vocabulary memorization. 

Answer: I would choose dictionaries due to the amount of data that needs to be accounted for and organized, and for the flexibility not only for changes that might
happen if the app expands but also due to the ever expanding vocabulary and defintions that arise through the years.
